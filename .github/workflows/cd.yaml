name: CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to GCP VM
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.GCP_HOST }}
          username: ${{ secrets.GCP_USER }}
          key: ${{ secrets.GCP_SSH_KEY }}
          script: |
            # Add user's local bin directory to PATH
            export PATH="$PATH:/home/${{ secrets.GCP_USER }}/bin"
            # Navigate to the project directory
            cd /home/${{ secrets.GCP_USER }}/expense-tracker

            # Create the production .env file on the VM
            echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" > .env
            echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
            echo "DATABASE_URL=postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@db:5432/${{ secrets.POSTGRES_DB }}" >> .env
            echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
            echo "DOCKER_HUB_USERNAME=${{secrets.DOCKER_HUB_USERNAME}}" >> .env

            # Log in to Docker Hub on the VM
            # This is crucial for pulling private images or avoiding rate limits for public images
            echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login --username ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

            # Export DOCKER_HUB_USERNAME for shell's environment before docker-compose pull
            # This ensures image names like ${DOCKER_HUB_USERNAME}/image:latest are correctly resolved
            export DOCKER_HUB_USERNAME=${{ secrets.DOCKER_HUB_USERNAME }}

             # Stop any existing containers and pull the latest images
            docker-compose -f docker-compose.prod.yaml down
            docker-compose -f docker-compose.prod.yaml pull

            # Start the new containers
            docker-compose -f docker-compose.prod.yaml up -d
