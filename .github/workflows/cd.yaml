name: CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to GCP VM
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.GCP_HOST }}
          username: ${{ secrets.GCP_USER }}
          key: ${{ secrets.GCP_SSH_KEY }}
          script: |
            export PATH="$PATH:/home/${{ secrets.GCP_USER }}/bin"
            cd /home/${{ secrets.GCP_USER }}/expense-tracker

            # Add this line to pull the latest code from your GitHub repository
            git pull origin main

            # Create the production .env file
            cat > .env <<EOL
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            DATABASE_URL=postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@db:5432/${{ secrets.POSTGRES_DB }}
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            DOCKER_HUB_USERNAME=${{ secrets.DOCKER_HUB_USERNAME }}
            API_V1_STR=${{ vars.API_V1_STR }}
            ACCESS_TOKEN_EXPIRE_MINUTES=${{ vars.ACCESS_TOKEN_EXPIRE_MINUTES }}
            GCP_HOST=${{secrets.GCP_HOST}}
            CORS_ORIGIN=http://${{ secrets.GCP_HOST }}:${{ vars.FRONTEND_PORT }}
            EOL

            # ✅ Log in to Docker Hub (required for private OR rate-limited pulls)
            echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login --username ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

            # ✅ Export DOCKER_HUB_USERNAME so compose can substitute it #
            export DOCKER_HUB_USERNAME=${{ secrets.DOCKER_HUB_USERNAME }}

            # Stop old containers and pull fresh images
            docker-compose -f docker-compose.prod.yaml down
            docker-compose -f docker-compose.prod.yaml pull

            # Start new containers
            docker-compose -f docker-compose.prod.yaml up -d
