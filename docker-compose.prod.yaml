services:
  db:
    image: postgres:16-alpine
    container_name: expensetracker_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    image: ${DOCKER_HUB_USERNAME}/expensetracker-backend:latest
    container_name: expensetracker_backend
    env_file:
      - .env  # This line correctly tells Docker Compose to load all variables from the .env file
    # Remove the 'environment' block below, as 'env_file' is now handling all backend variables
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000

  frontend:
    image: ${DOCKER_HUB_USERNAME}/expensetracker-frontend:latest
    container_name: expensetracker_frontend
    environment:
      # This variable is specific to the frontend's build/runtime, so it stays here.
      # It references GCP_HOST which is expected to be in the .env file.
      VITE_API_BASE_URL: http://${GCP_HOST}:8000/api/v1
    ports:
      - "5173:80"
    depends_on:
      backend:
        condition: service_started

volumes:
  pgdata: